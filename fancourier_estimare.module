<?php

//require_once('fancourier.class.php');
//module_load_include('php', 'fancourier', 'fancourier.class.php');

/*
 * @file
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 * Implementing hook_menu();
 */
function fancourier_estimare_menu() {
  $items['admin/config/fancourier'] = array(
    'title' => 'Fancourier Estimare',
    'description' => 'Fancourier Estimare Description',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('fancourier_estimare_form'),
    'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),
    'menu_name' => 'management',
    'weight' => -5,
  );
  return $items;
}

function fancourier_estimare_form($form, &$form_state) {
  
  $adrese = get_adress_data_by_nodeid();
  $grabbed_enabled_transport_types = get_fancourier_services_enabled(); 
  $form['adresses'] = array(
    '#type' => 'select',
    '#title' => 'Adresa Destinatie',
    '#description' => t('translatable description.'),
    '#options' => $adrese,
  );
  
  $form['selected_transport_type'] = array(
    '#type' => 'select',
    '#title' => 'Tip transport:',
    '#description' => t('transalfsdf description'),
    '#options' => $grabbed_enabled_transport_types,
  );
  
  //$fancourier_array = variable_get('fancourier');
  
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Estimeaza taxa transport !',   
  );
  return $form;
}
function get_adresses_node_object() {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
  ->entityCondition('bundle', 'adresa')
  ->propertyCondition('status', 1)
  ->addMetaData('account', user_load(1)); // Run the query as user 1.
  $result = $query->execute();
  
if (isset($result['node'])) {
  $addresses_nids = array_keys($result['node']);
  $addresses_values = array_values($result['node']);
  $addresses_objects = entity_load('node', $addresses_nids);
}
 // Array Keys , array values
 //$asddd = $addresses_objects[$addresses_nids]->title;
 //dpm($asddd);
 //dpm($result);
//dpm($addresses_objects);
 return $addresses_objects; 
}
/**
 * THIS DOESNT GO AS PLANNED
 * @return type
 */
function get_adress_data_by_nodeid(){
  $objects = get_adresses_node_object();
  foreach ($objects as $key => $value){
    $nodeid_array[] = $value->nid;
  }
  $query = db_select('field_data_field_addressfield', 'addressfield')
    ->fields('addressfield')
    ->condition('entity_id',$nodeid_array)
    ->orderBy('field_addressfield_locality', 'DESC')//ORDER BY created
    ->range(0,500);//LIMIT to 2 records

    $results= $query->execute();
    
  foreach ($results as $key => $value) {
    $entity_id = $value->entity_id;//dpm($value->field_addressfield_thoroughfare);\
    $city = $value->field_addressfield_locality;
    $strada = $value->field_addressfield_thoroughfare;
    $cod_tara = $value->field_addressfield_country;
    $nume_complet = $value->field_addressfield_name_line;
    //UNCOMMENT TO VIEW COMPLETE DATA    
    //dpm('EntityID : ' . $entity_id . ' Oras: ' . $city . ' Strada: ' . $strada . ' Tara: ' . $cod_tara . ' Nume complet: ' . $nume_complet);
    $adrese[$strada] = $strada;
  }
  return $adrese;
}
//entity_type (String, 4 characters ) node
//bundle (String, 6 characters ) adresa
//deleted (String, 1 characters ) 0
//entity_id (String, 1 characters ) 9
//revision_id (String, 1 characters ) 9
//language (String, 3 characters ) und
//delta (String, 1 characters ) 0
//field_addressfield_country (String, 2 characters ) RO
//field_addressfield_administrative_area (NULL)
//field_addressfield_sub_administrative_area (NULL)
//field_addressfield_locality (String, 11 characters ) Targu Mures
//field_addressfield_dependent_locality (NULL)
//field_addressfield_postal_code (String, 6 characters ) 550014
//field_addressfield_thoroughfare (String, 15 characters ) Transilvania 54
//field_addressfield_premise (String, 0 characters )
//field_addressfield_sub_premise (NULL)
//field_addressfield_organisation_name (NULL)
//field_addressfield_name_line (String, 10 characters ) Vasile Ion
//field_addressfield_first_name (String, 6 characters ) Vasile
//field_addressfield_last_name (String, 3 characters ) Ion
//field_addressfield_data (NULL)

function get_fancourier_services_enabled(){
  $fancourier_variable = variable_get('fancourier');
  $services_enabled = $fancourier_variable['services'];
  
  foreach ($services_enabled as $key => $value){
     $service_enabled[$key] = $value;
  }
  //dpm($service_enabled);
  return $service_enabled;
}

function fancourier_estimare_form_submit($form, &$form_state) {
   if (isset($form_state['values'])){
    dpm('exista formstate de values. il printam');
    dpm($form_state['values']);
  }else{
    dpm('nu exista form state de values');
  }
  
// dpm('save button has been pressed. here\'s the form: ');
// dpm($form);
// dpm('the form state dupa submit: ');
// dpm($form_state);
  
}

//Functia la care am renuntat
//function get_addresses_node_ids() {
//  $query_addresses = get_adresses_node_object();
//  $nodeids_adresses = array();
//  foreach ($query_addresses as $key => $values){
//    $nodeids_adresses[$key] = $values->nid;
//  }
//return $nodeids_adresses;
//}
function fancourier_estimare_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'fancourier_form') {
     $form['#submit'][] = 'fancourier_submit_handler';
  }
}
function fancourier_submit_handler(&$form, &$form_state) {
  $form_state['redirect'] = 'admin/config/fancourier';
}